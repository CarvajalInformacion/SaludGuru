// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace BackOffice.Web.Controllers
{
    public partial class SpecialtyController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SpecialtyController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SpecialtyController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SpecialtyList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpecialtyList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SpecialtyUpsert()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpecialtyUpsert);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SpecialtyByTreatment()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpecialtyByTreatment);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SpecialtyBySpecialty()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpecialtyBySpecialty);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SpecialtyController Actions { get { return MVC.Specialty; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Specialty";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Specialty";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string SpecialtyList = "SpecialtyList";
            public readonly string SpecialtyUpsert = "SpecialtyUpsert";
            public readonly string SpecialtyByTreatment = "SpecialtyByTreatment";
            public readonly string SpecialtyBySpecialty = "SpecialtyBySpecialty";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string SpecialtyList = "SpecialtyList";
            public const string SpecialtyUpsert = "SpecialtyUpsert";
            public const string SpecialtyByTreatment = "SpecialtyByTreatment";
            public const string SpecialtyBySpecialty = "SpecialtyBySpecialty";
        }


        static readonly ActionParamsClass_SpecialtyList s_params_SpecialtyList = new ActionParamsClass_SpecialtyList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SpecialtyList SpecialtyListParams { get { return s_params_SpecialtyList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SpecialtyList
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_SpecialtyUpsert s_params_SpecialtyUpsert = new ActionParamsClass_SpecialtyUpsert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SpecialtyUpsert SpecialtyUpsertParams { get { return s_params_SpecialtyUpsert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SpecialtyUpsert
        {
            public readonly string specialtyId = "specialtyId";
        }
        static readonly ActionParamsClass_SpecialtyByTreatment s_params_SpecialtyByTreatment = new ActionParamsClass_SpecialtyByTreatment();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SpecialtyByTreatment SpecialtyByTreatmentParams { get { return s_params_SpecialtyByTreatment; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SpecialtyByTreatment
        {
            public readonly string SpecialtyId = "SpecialtyId";
        }
        static readonly ActionParamsClass_SpecialtyBySpecialty s_params_SpecialtyBySpecialty = new ActionParamsClass_SpecialtyBySpecialty();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SpecialtyBySpecialty SpecialtyBySpecialtyParams { get { return s_params_SpecialtyBySpecialty; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SpecialtyBySpecialty
        {
            public readonly string SpecialtyId = "SpecialtyId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_SpecialtyController : BackOffice.Web.Controllers.SpecialtyController
    {
        public T4MVC_SpecialtyController() : base(Dummy.Instance) { }

        [NonAction]
        partial void SpecialtyListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult SpecialtyList(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpecialtyList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            SpecialtyListOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void SpecialtyUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string specialtyId);

        [NonAction]
        public override System.Web.Mvc.ActionResult SpecialtyUpsert(string specialtyId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpecialtyUpsert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "specialtyId", specialtyId);
            SpecialtyUpsertOverride(callInfo, specialtyId);
            return callInfo;
        }

        [NonAction]
        partial void SpecialtyByTreatmentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string SpecialtyId);

        [NonAction]
        public override System.Web.Mvc.ActionResult SpecialtyByTreatment(string SpecialtyId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpecialtyByTreatment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SpecialtyId", SpecialtyId);
            SpecialtyByTreatmentOverride(callInfo, SpecialtyId);
            return callInfo;
        }

        [NonAction]
        partial void SpecialtyBySpecialtyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string SpecialtyId);

        [NonAction]
        public override System.Web.Mvc.ActionResult SpecialtyBySpecialty(string SpecialtyId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpecialtyBySpecialty);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SpecialtyId", SpecialtyId);
            SpecialtyBySpecialtyOverride(callInfo, SpecialtyId);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
