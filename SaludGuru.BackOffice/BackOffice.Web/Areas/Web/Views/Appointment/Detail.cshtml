@model BackOffice.Models.Appointment.SchedulingModel
@{
    ViewBag.Title = "SaludGuru - agenda detalle";
    Layout = "~/Areas/Web/Views/Shared/_Layout.cshtml";

    Model.RenderScripts = false;

    //get current appointment status
    MedicalCalendar.Manager.Models.enumAppointmentStatus oApmntStatus = Model.CurrentAppointment != null ?
        (MedicalCalendar.Manager.Models.enumAppointmentStatus)Model.CurrentAppointment.AppointmentStatus :
        MedicalCalendar.Manager.Models.enumAppointmentStatus.New;
}

<div class="BOAgendaModuleGreatWrapper">
    <div class="BOAgendaCalendarWrapper">
        <!--Calendar by month-->
        @Html.Partial(MVC.Web.Shared.Views._AP_Calendar, Model)

        <!--Meeting Calendar-->
        @Html.Partial(MVC.Web.Shared.Views._AP_MeetingCalendar, Model)
    </div>
    <div class="BOVerMasAppointmentFormStatus_@((int)oApmntStatus)">
        <div class="BOVerMasTop">
            @if (!string.IsNullOrEmpty(Model.ReturnUrl))
            {
                <a href="@Model.ReturnUrl">Volver</a>
            }
            <span>Detalles de la cita</span>
            <span>
                @if (Model.CurrentAppointment == null)
                {
                    Html.Raw(BackOffice.Models.General.InternalSettings.Instance
                        [BackOffice.Models.General.Constants.C_Settings_Appointment_StatusName_New].Value);
                }
                else
                {
                    Html.Raw(BackOffice.Models.General.InternalSettings.Instance
                        [BackOffice.Models.General.Constants.C_Settings_Appointment_StatusName.
                        Replace("{{StatusId}}", Model.CurrentAppointment.AppointmentStatus.ToString())].Value);
                }
            </span>
        </div>
        <div class="BOVerMasLeftColumn BOFormDataWrapper">
            <!--appointment info-->
            <form id="frmAppointment" name="frmAppointment" action="@(Url.Action(MVC.Appointment.ActionNames.Detail, MVC.Appointment.Name))" method="post">
                <ul>
                    <li>
                        <label>Consultorio:</label>
                        <select id="OfficePublicId" name="OfficePublicId"></select>
                    </li>
                    <li>
                        <label>Tipo de tratamiento:</label>
                        <select id="TreatmentId" name="TreatmentId"></select>
                    </li>
                    <li>
                        <label>Fecha de inicio:</label>
                        <input type="text" id="StartDate" name="StartDate" />
                    </li>
                    <li>
                        <label>Hora de inicio:</label>
                        <input type="text" id="StartTime" name="StartTime" />
                    </li>
                    <li>
                        <label>Duración:</label>
                        <input type="text" id="Duration" name="Duration" />
                    </li>
                    <li>
                        <label>Notas de la cita:</label>
                        <textarea id="AppointmentNote" name="AppointmentNote">@(Model.CurrentAppointment == null ? string.Empty : Model.CurrentAppointment.AppointmentNote)</textarea>
                    </li>

                    <li>
                        <label>Cuidados previos:</label>
                        <textarea id="AfterCare" name="AfterCare">@(Model.CurrentAppointment == null ? string.Empty : Model.CurrentAppointment.AfterCare)</textarea>
                    </li>
                    <li>
                        <label>Cuidados posteriores:</label>
                        <textarea id="BeforeCare" name="BeforeCare">@(Model.CurrentAppointment == null ? string.Empty : Model.CurrentAppointment.BeforeCare)</textarea>
                    </li>
                </ul>
                <!--hidden fields-->
                <div style="display:none;">
                    <input type="hidden" id="ReturnUrl" name="ReturnUrl" value="@Model.ReturnUrl" />
                    <input type="hidden" id="UpsertAction" name="UpsertAction" />
                    <input type="hidden" id="SendNotifications" name="SendNotifications" value="false" />
                    <input type="hidden" id="AppointmentPublicId" name="AppointmentPublicId" value="@(Model.CurrentAppointment != null && !string.IsNullOrEmpty(Model.CurrentAppointment.id) ? Model.CurrentAppointment.id : string.Empty)" />
                    <input type="hidden" id="PatientAppointmentCreate" name="PatientAppointmentCreate" />
                    <input type="hidden" id="PatientAppointmentDelete" name="PatientAppointmentDelete" />
                </div>
            </form>
        </div>
        <div class="BOVerMasRightColumn">
            <!--patient info-->
            <ul>
                <li class="BOVerMasAddPatientesAppointment">
                    <label>Agregar pacientes a esta cita:</label>
                    <input type="text" id="getPatient" />
                    <a href="javascript:;">+</a>
                </li>
                <li>
                    <h4 class="BOHeadingColorStatus_@((int)oApmntStatus)">Paciente(s) asignados a la cita:</h4>
                </li>
                <li>
                    <ul id="lstPatient"></ul>
                </li>
            </ul>
        </div>
        <div id="AppointmentUpsertActions" class="BOVerMasAppointmentCommands">

            @switch (oApmntStatus)
            {
                case MedicalCalendar.Manager.Models.enumAppointmentStatus.New:
                    if (Model.CurrentAppointment == null)
                    {
                    }
                    else
                    {
                        <span class="AppointmentActionsCancel">
                            <a href="javascript:;">Cancelar</a>
                        </span>
                        <span class="AppointmentActionsConfirm">
                            <a href="javascript:;">Confirmar</a>
                        </span>
                        <span class="AppointmentActionsNew">
                            <a href="javascript:;">Nueva Cita</a>
                        </span>
                    }
                    <span class="AppointmentActionsAccept">
                        <a href="javascript:;">Guardar</a>
                    </span>
                    break;
                case MedicalCalendar.Manager.Models.enumAppointmentStatus.Confirmed:
                <span class="AppointmentActionsCancel">
                    <a href="javascript:;">Cancelar</a>
                </span>
                <span class="AppointmentActionsNew">
                    <a href="javascript:;">Nueva Cita</a>
                </span>
                <span class="AppointmentActionsAccept">
                    <a href="javascript:;">Guardar</a>
                </span>
                    break;
                case MedicalCalendar.Manager.Models.enumAppointmentStatus.Canceled:
                <span class="AppointmentActionsNew">
                    <a href="javascript:;">Nueva Cita</a>
                </span>
                    break;
                case MedicalCalendar.Manager.Models.enumAppointmentStatus.PendientAsistance:
                <span class="AppointmentActionsConfirm">
                    <a href="javascript:;">Confirmar</a>
                </span>
                <span class="AppointmentActionsNew">
                    <a href="javascript:;">Nueva Cita</a>
                </span>
                <span class="AppointmentActionsAccept">
                    <a href="javascript:;">Guardar</a>
                </span>
                    break;
                case MedicalCalendar.Manager.Models.enumAppointmentStatus.Attendance:
                <span class="AppointmentActionsNew">
                    <a href="javascript:;">Nueva Cita</a>
                </span>
                    break;
                case MedicalCalendar.Manager.Models.enumAppointmentStatus.NotAttendance:
                <span class="AppointmentActionsNew">
                    <a href="javascript:;">Nueva Cita</a>
                </span>
                    break;
                default:
                    break;
            }
        </div>
    </div>
</div>

<!--templates-->
<div style="display:none;">
    <!--patient autocomplete-->
    <div id="divPatientAcItem">
        <div class="autocompletePatients">
            <img src="{ProfileImage}" />
            <label>
                {Name}<br />
                Ident: {IdentificationNumber}<br />
                Cel: {Mobile}
            </label>
        </div>
    </div>

    <!--patient appointment-->
    <ul id="ulPatientAppointment">
        <li id="{PatientPublicId}">

            <!--photo container-->
            <div class="BOPatientPhotoContainer">
                <a target="_blank" href="@(Url.Action(MVC.Patient.ActionNames.PatientUpsert, MVC.Patient.Name) + "?PatientPublicId={PatientPublicId}")">
                    <img src="{ProfileImage}" />
                </a>
            </div>

            <!--data container-->
            <div class="BOPatientDataContainer">
                <a target="_blank" href="@(Url.Action(MVC.Patient.ActionNames.PatientUpsert, MVC.Patient.Name) + "?PatientPublicId={PatientPublicId}")">{Name}</a>
                <label>Ident: {IdentificationNumber}</label>
                <label>Cel: {Mobile}</label>
                <label>Email: {Email}</label>
            </div>
            <div class="BOPatientRemoveContainer BOVerMasPatientRemove">
                <a href="javascript:AppointmentDetailObject.RemovePatientAppointment('{PatientPublicId}')"></a>
                <a target="_blank" href="@(Url.Action(MVC.Patient.ActionNames.PatientUpsert, MVC.Patient.Name) + "?PatientPublicId={PatientPublicId}")"></a>
            </div>

            <!--doctor notes-->
            <h4 class="BOHeadingColorStatus_@((int)oApmntStatus)">Notas Del Doctor</h4>
            <div class="BOAddNotes">
                <textarea id="NewDoctorNote_{PatientPublicId}" rows="15" cols="15">&nbsp;</textarea>
                <span>
                    <a href="javascript:AppointmentDetailObject.AddPatientNote('{PatientPublicId}');">Agregar nota</a>
                </span>
            </div>
            <div class="BoNotesList">
                <ul id="ulDoctorNotes_{PatientPublicId}"></ul>
            </div>
            <!--related appointment-->
            <h4 class="BOHeadingColorStatus_@((int)oApmntStatus)">Historial de citas del paciente</h4>
            <div>
                <div id="divPatientAppointment_{PatientPublicId}" class="patientAppointmentClass BOVerMasAllAppointments"></div>
                <a class="BOVerMasAllAppointmentsThisPatient" href="@(Url.Action(MVC.Patient.ActionNames.AppointmentList, MVC.Patient.Name)+"?PatientPublicId={PatientPublicId}")">Ver todas la citas de este paciente</a>
            </div>
            <!--remove patient container-->
            

        </li>
    </ul>

    <!--patient notes template-->
    <ul id="ulDoctorNotes">
        <li>
            <span>{NoteDate}</span>
            <label id="">{NoteText}</label>
            <a href="javascript:AppointmentDetailObject.RemovePatientNote('{PatientPublicId}','{PatientInfoId}');">Borrar nota</a>
        </li>
    </ul>

    <!--patient appointment template-->
    <div id="divPatientAppointmentTemplate">
        <div class="${className}">
            <a href="@(Url.Action(MVC.Appointment.ActionNames.Detail, MVC.Appointment.Name) + "?AppointmentPublicId=${id}")">
                <img src="${AppointmentImage}" />
                <label>${AppointmentDateText}</label>
                <label>${OfficeName}</label>
                <label>${AppointmentText}</label>
            </a>
        </div>
    </div>
</div>
<!--dialogs-->
<div id="AppointmentDialog" style="display:none;">

    <!--Dialog save appointment changes-->
    <div id="Dialog_SaveAppointment" title="Guardar cambios">
        <p>Desea enviar notificacion a el (los) pacientes de los cambios efectuados sobre la cita?</p>
    </div>

    <!--Dialog cancel appointment-->
    <div id="Dialog_CancelAppointment" title="Guardar cambios">
        <p>Desea enviar notificacion a el (los) pacientes de los cambios efectuados sobre la cita?</p>
    </div>

    <!--Dialog confirm appointment-->
    <div id="Dialog_ConfirmAppointment" title="Confirmar asistencia">
        <form action="@(Url.Action(MVC.Appointment.ActionNames.Detail, MVC.Appointment.Name))" method="post" id="frmConfirmAppointment" name="frmConfirmAppointment">
            <ul>
                <li>
                    <div>
                        <input type="radio" name="NewStatus" value="@Html.Raw((int)MedicalCalendar.Manager.Models.enumAppointmentStatus.Attendance)" />
                        <span>El paciente asistio a la cita</span>
                    </div>
                    <div>
                        <input type="radio" name="NewStatus" value="@Html.Raw((int)MedicalCalendar.Manager.Models.enumAppointmentStatus.NotAttendance)" />
                        <span>El paciente no asistio a la cita</span>
                    </div>
                </li>
                <li id="liRemindedFuture">
                    <input name="SendRemindedFuture" id="SendRemindedFuture" type="checkbox" />
                    <span>Enviar recordatorio de proxima cita</span>
                    <div id="divRemindedDate">
                        <span>Seleccione la fecha de envio del recordatorio</span>
                        <input type="text" id="RemindedDate" name="RemindedDate" />
                    </div>
                </li>
            </ul>

            <div style="display:none;">
                <!-- hidden fields -->
                <input type="hidden" id="R_ReturnUrl" name="R_ReturnUrl" value="@Model.ReturnUrl" />
                <input type="hidden" id="R_UpsertAction" name="UpsertAction" value="ConfirmAppointment" />
                <input type="hidden" id="R_AppointmentPublicId" name="R_AppointmentPublicId" value="@(Model.CurrentAppointment == null ? string.Empty : Model.CurrentAppointment.AppointmentPublicId)" />
            </div>
        </form>
    </div>

</div>


@{
    //create office object
    string oOfficeInfo = (new System.Web.Script.Serialization.JavaScriptSerializer()).
        Serialize(Model.CurrentProfile.RelatedOffice.Select(of =>
                new
                {
                    OfficePublicId = of.OfficePublicId,
                    OfficeName = of.Name,
                    OfficeDivId = string.Empty,
                    IsDefault = of.IsDefault,
                    City = of.City,
                    OfficeScheduleConfigUrl = Url.Action(MVC.Profile.ActionNames.OfficeScheduleAvailableList,
                                                MVC.Profile.Name,
                                                new { ProfilePublicId = Model.CurrentProfile.ProfilePublicId, OfficePublicId = of.OfficePublicId }),
                    TreatmentList = of.RelatedTreatment.Select(tr => new
                    {
                        TreatmentId = tr.CategoryId,
                        TreatmentName = tr.Name,
                        IsDefault = tr.TreatmentOfficeInfo.
                            Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.IsDefault).
                            Select(z => z.Value == "true" ? true : false).DefaultIfEmpty(false).FirstOrDefault(),
                        Duration = tr.TreatmentOfficeInfo.
                            Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.DurationTime).
                            Select(z => z.Value).DefaultIfEmpty("30").FirstOrDefault(),
                        AfterCare = tr.TreatmentOfficeInfo.
                            Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.AfterCare).
                            Select(z => z.LargeValue).DefaultIfEmpty("").FirstOrDefault(),
                        BeforeCare = tr.TreatmentOfficeInfo.
                            Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.BeforeCare).
                            Select(z => z.LargeValue).DefaultIfEmpty("").FirstOrDefault(),
                    }).OrderBy(tro => tro.IsDefault).OrderBy(tro => tro.TreatmentName).ToList(),
                }).OrderBy(x => x.IsDefault).
                OrderBy(x => x.OfficeName).ToList());

    //create appointment object
    string oAppointmentInfo = (new System.Web.Script.Serialization.JavaScriptSerializer()).Serialize(Model.CurrentAppointment);

    Model.RenderScripts = true;
}
@section inlinescripts
{
    @Html.Partial(MVC.Web.Shared.Views._AP_Calendar, Model)
    @Html.Partial(MVC.Web.Shared.Views._AP_MeetingCalendar, Model)

    <script type="text/javascript">
        $(document).ready(function () {
            //render metting calendar
            AppointmentDetailObject.Init({
                StartDateTime : new Date('@(Model.CurrentStartDate.Year.ToString())', '@((Model.CurrentStartDate.Month - 1).ToString())', '@(Model.CurrentStartDate.Day)', '@(Model.CurrentStartDate.Hour)', '@(Model.CurrentStartDate.Minute)', '@(Model.CurrentStartDate.Second)'),
                CurrentAppointment: @Html.Raw(oAppointmentInfo),
                OfficeInfo: @Html.Raw(oOfficeInfo),
            });
            AppointmentDetailObject.RenderAsync();
        });
    </script>
}