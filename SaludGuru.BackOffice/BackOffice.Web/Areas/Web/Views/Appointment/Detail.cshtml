@model BackOffice.Models.Appointment.SchedulingModel
@{
    ViewBag.Title = "SaludGuru - agenda detalle";
    Layout = "~/Areas/Web/Views/Shared/_Layout.cshtml";

    Model.RenderScripts = false;
}

<div class="BOAgendaModuleGreatWrapper">
    <div class="BOAgendaCalendarWrapper" style="width:390px;overflow:scroll;left:0px;position:absolute;">
        <!--Calendar by month-->
        @Html.Partial(MVC.Web.Shared.Views._AP_Calendar, Model)

        <!--Meeting Calendar-->
        @Html.Partial(MVC.Web.Shared.Views._AP_MeetingCalendar, Model)
    </div>
    <div style="height:900px;">
        <div>
            @if (!string.IsNullOrEmpty(Model.ReturnUrl))
            {
                <a href="@Model.ReturnUrl">Volver</a>
            }
            <span>Detalles de la cita</span>
        </div>
        <div>
            <!--appointment info-->
            <form action="" method="post">
                <ul>
                    <li>
                        <label>Consultorio:</label>
                        <select id="OfficePublicId" name="OfficePublicId"></select>
                    </li>
                    <li>
                        <label>Tipo de tratamiento:</label>
                        <select id="TreatmentId" name="TreatmentId"></select>
                    </li>
                    <li>
                        <label>Fecha de inicio:</label>
                        <input type="text" id="StartDate" name="StartDate" />
                    </li>
                    <li>
                        <label>Hora de inicio:</label>
                        <input type="text" id="StartTime" name="StartTime" />
                    </li>
                    <li>
                        <label>Duración:</label>
                        <input type="text" id="Duration" name="Duration" />
                    </li>
                    <li>
                        <label>Cuidados previos:</label>
                        <input type="text" id="AfterCare" name="AfterCare" />
                    </li>
                    <li>
                        <label>Cuidados posteriores:</label>
                        <input type="text" id="BeforeCare" name="BeforeCare" />
                    </li>
                </ul>
                <!--hidden fields-->
                <div style="display:none;">
                    <input type="hidden" id="ReturnUrl" name="ReturnUrl" value="@Model.ReturnUrl" />
                    <input type="hidden" id="SendNotifications" name="SendNotifications" value="false" />
                    <input type="hidden" id="AppointmentPublicId" name="AppointmentPublicId" value="@(Model.CurrentAppointment != null && !string.IsNullOrEmpty(Model.CurrentAppointment.id) ? Model.CurrentAppointment.id : string.Empty)" />
                    <input type="hidden" id="PatientAppointmentCreate" name="PatientAppointmentCreate" value="" />
                    <input type="hidden" id="PatientAppointmentDelete" name="PatientAppointmentDelete" />
                </div>
                <div>
                    <a href="javascript:;">Guardar</a>
                </div>
            </form>
        </div>
        <div>
            <!--patient info-->
            <ul>
                <li>
                    <label>Agregar paciente:</label>
                    <input type="text" id="getPatient" />
                    <a href="javascript:;">+</a>
                </li>
                <li>
                    <h4>Paciente(s) asignados a la cita:</h4>
                </li>
                <li>
                    <ul id="lstPatient"></ul>
                </li>
            </ul>
        </div>
    </div>
</div>

@{
    //create office object
    string oOfficeInfo = (new System.Web.Script.Serialization.JavaScriptSerializer()).
        Serialize(Model.CurrentProfile.RelatedOffice.Select(of =>
                new
                {
                    OfficePublicId = of.OfficePublicId,
                    OfficeName = of.Name,
                    OfficeDivId = string.Empty,
                    IsDefault = of.IsDefault,
                    City = of.City,
                    OfficeScheduleConfigUrl = Url.Action(MVC.Profile.ActionNames.OfficeScheduleAvailableList,
                                                MVC.Profile.Name,
                                                new { ProfilePublicId = Model.CurrentProfile.ProfilePublicId, OfficePublicId = of.OfficePublicId }),
                    TreatmentList = of.RelatedTreatment.Select(tr => new
                    {
                        TreatmentId = tr.CategoryId,
                        TreatmentName = tr.Name,
                        IsDefault = tr.TreatmentOfficeInfo.
                            Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.IsDefault).
                            Select(z => z.Value == "true" ? true : false).DefaultIfEmpty(false).FirstOrDefault(),
                        Duration = tr.TreatmentOfficeInfo.
                            Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.DurationTime).
                            Select(z => z.Value).DefaultIfEmpty("30").FirstOrDefault(),
                        AfterCare = tr.TreatmentOfficeInfo.
                            Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.AfterCare).
                            Select(z => z.LargeValue).DefaultIfEmpty("").FirstOrDefault(),
                        BeforeCare = tr.TreatmentOfficeInfo.
                            Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.BeforeCare).
                            Select(z => z.LargeValue).DefaultIfEmpty("").FirstOrDefault(),
                    }).OrderBy(tro => tro.IsDefault).OrderBy(tro => tro.TreatmentName).ToList(),
                }).OrderBy(x => x.IsDefault).
                OrderBy(x => x.OfficeName).ToList());

    //create appointment object
    string oAppointmentInfo = (new System.Web.Script.Serialization.JavaScriptSerializer()).Serialize(Model.CurrentAppointment);

    Model.RenderScripts = true;
}
@section inlinescripts
{
    @Html.Partial(MVC.Web.Shared.Views._AP_Calendar, Model)
    @Html.Partial(MVC.Web.Shared.Views._AP_MeetingCalendar, Model)

    <script type="text/javascript">
        $(document).ready(function () {
            //render metting calendar
            AppointmentDetailObject.Init({
                StartDateTime : new Date('@(Model.CurrentStartDate.Year.ToString())', '@((Model.CurrentStartDate.Month - 1).ToString())', '@(Model.CurrentStartDate.Day)', '@(Model.CurrentStartDate.Hour)', '@(Model.CurrentStartDate.Minute)', '@(Model.CurrentStartDate.Second)'),
                CurrentAppointment: @Html.Raw(oAppointmentInfo),
                OfficeInfo: @Html.Raw(oOfficeInfo),
            });
            AppointmentDetailObject.RenderAsync();
        });
    </script>
}