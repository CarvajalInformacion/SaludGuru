@model BackOffice.Models.Appointment.SchedulingModel
@{
    ViewBag.Title = "Day";
    Layout = "~/Areas/Web/Views/Shared/_Layout.cshtml";
}

<!--Calendar by month-->
<div>
    <div>
        <a href="">Anterior</a>
        <a href="">Siguiente</a>
    </div>
    <div id="Calendar-Left"></div>
    <div id="Calendar-Right"></div>
</div>

<!--create edit appointment-->
<div id="AppointmentUpsert" style="display:none;">
    <form action="/api/AppointmentApi?UpsertAction=true" method="post" id="frmAppointment" name="frmAppointment">
        <ul>
            <li>
                <label>Datos de la cita</label>
            </li>
            <li>
                <label>Consultorio:</label>
                <select id="OfficePublicId" name="OfficePublicId"></select>
            </li>
            <li>
                <label>Tipo de tratamiento:</label>
                <select id="TreatmentId" name="TreatmentId"></select>
                <input type="hidden" id="CatId_TreatmentId" name="CatId_TreatmentId" />
            </li>
            <li>
                <label>Fecha de inicio:</label>
                <input type="text" id="StartDate" name="StartDate" />
            </li>
            <li>
                <label>Hora de inicio:</label>
                <input type="text" id="StartTime" name="StartTime" />
            </li>
            <li>
                <label>Duración:</label>
                <input type="text" id="Duration" name="Duration" />
            </li>
            <li>
                <label>Asignar paciente(s):</label>
                <input type="text" id="getPatient" name="getPatient" />
            </li>
            <li>
                <label>Paciente(s) asignados a la cita:</label>
            </li>
            <li>
                <ul id="lstPatient"></ul>
            </li>
        </ul>
        <div>
            <a href="javascript:MeetingObject.SaveAppointment()">Guardar</a>
        </div>
        <!--hidden fields-->
        <div style="display:none;">
            <input type="hidden" id="AppointmentPublicId" name="AppointmentPublicId" />
            <input type="hidden" id="PatientAppointmentCreate" name="PatientAppointmentCreate" />
            <input type="hidden" id="PatientAppointmentDelete" name="PatientAppointmentDelete" />
            <input type="hidden" id="AfterCare" name="AfterCare" />
            <input type="hidden" id="CatId_AfterCare" name="CatId_AfterCare" />
            <input type="hidden" id="BeforeCare" name="BeforeCare" />
            <input type="hidden" id="CatId_BeforeCare" name="CatId_BeforeCare" />
        </div>
    </form>
</div>

<!--Meeting Calendar-->
<div id="divMeetingCalendar">
</div>

<div id="templates" style="display:none;">
    <!--metting calendar-->
    <div id="divMetting">
        <div id="divOfficePublicId" class="selMetting"></div>
    </div>

    <!--patient autocomplete-->
    <div id="divPatientAcItem">
        <div>
            <img src="{ProfileImage}" />
            <label>{Name}</label>
            <label>Ident: {IdentificationNumber}</label>
            <label>Cel: {Mobile}</label>
        </div>
    </div>

    <!--patient appointment-->
    <ul id="ulPatientAppointment">
        <li id="{PatientPublicId}">
            <img src="{ProfileImage}" />
            <label>{Name}</label>
            <label>Ident: {IdentificationNumber}</label>
            <label>Cel: {Mobile}</label>
            <label>Cel: {Email}</label>
            <a href="javascript:MeetingObject.RemovePatientAppointment('{PatientPublicId}')">Eliminar</a>
            <a href="@(Url.Action(MVC.Patient.ActionNames.PatientUpsert, MVC.Patient.Name) + "?PatientUpsert={PatientPublicId}")">Perfil paciente</a>
        </li>
    </ul>

    <!--appointment template-->
    <div id="divAppointmentTemplate">
        <div>
            <img src="{AppointmentImage}" />
            <label>{AppointmentName}</label>
        </div>
    </div>
</div>
<div style="height:100px;"></div>

@{
    //create office calendar object
    string oOfficeInfo = (new System.Web.Script.Serialization.JavaScriptSerializer()).
                Serialize(Model.CurrentProfile.RelatedOffice.Select(of =>
                        new
                        {
                            OfficePublicId = of.OfficePublicId,
                            OfficeName = of.Name,
                            OfficeDivId = string.Empty,
                            TreatmentList = of.RelatedTreatment.Select(tr => new
                            {
                                TreatmentId = tr.CategoryId,
                                TreatmentName = tr.Name,
                                Default = tr.TreatmentOfficeInfo.Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.IsDefault).Select(z => z.Value == "true" ? true : false).DefaultIfEmpty(false).FirstOrDefault(),
                                Duration = tr.TreatmentOfficeInfo.Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.DurationTime).Select(z => z.Value).DefaultIfEmpty("30").FirstOrDefault(),
                                AfterCare = tr.TreatmentOfficeInfo.Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.AfterCare).Select(z => z.LargeValue).DefaultIfEmpty("").FirstOrDefault(),
                                BeforeCare = tr.TreatmentOfficeInfo.Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.BeforeCare).Select(z => z.LargeValue).DefaultIfEmpty("").FirstOrDefault(),
                            }).OrderBy(tro => tro.TreatmentName).ToList(),
                        }).OrderBy(ofo => ofo.OfficeName).ToList());
}

@section inlinescripts
{
    <style>
        .ui-datepicker-week-end a.ui-state-default {
            background: #00ffff;
        }
        /*holiday*/
        .specialDay_1 a.ui-state-default {
            background: #ff0000;
        }
        /*not available day*/
        .specialDay_2 a.ui-state-default {
            background: #0026ff;
        }
        /*hide next and preview*/
        #Calendar-Left .ui-datepicker-prev {
            display: none;
        }

        #Calendar-Right .ui-datepicker-prev {
            display: none;
        }

        #Calendar-Left .ui-datepicker-next {
            display: none;
        }

        #Calendar-Right .ui-datepicker-next {
            display: none;
        }

        /*hide calendar all day event*/
        #divMeetingCalendar .fc-agenda-allday {
            display: none;
        }

        #divMeetingCalendar .fc-agenda-divider {
            display: none;
        }

        /*event personalized style*/
        .claseEvento_1 #div1j {
            background-color: #0026ff;
        }
    </style>

    <script type="text/javascript">
        $(document).ready(function () {
            //render calendar by month
            MettingCalendarObject.InitMettingCalendar({
                DivId: 'Calendar',
                CountryId: '@(Model.CurrentProfile.RelatedOffice== null?1: Model.CurrentProfile.RelatedOffice.Select(x=>x.City.CountryId).DefaultIfEmpty(1).FirstOrDefault())',
                ProfilePublicId: '@Model.CurrentProfile.ProfilePublicId',
                CurrentDate: new Date('@(Model.CurrentStartDate.Year.ToString())', '@((Model.CurrentStartDate.Month - 1).ToString())', '@(Model.CurrentStartDate.Day)'),
            });
            MettingCalendarObject.InitMettingCalendarDoubleByDayAsync(new Date('@(Model.CurrentStartDate.AddMonths(1).Year.ToString())', '@((Model.CurrentStartDate.AddMonths(1).Month - 1).ToString())', '1'));

            //render day calendar
            MeetingObject.InitMeeting({
                CurrentDateTime:new Date('@(Model.CurrentStartDate.Year.ToString())', '@((Model.CurrentStartDate.Month - 1).ToString())', '@(Model.CurrentStartDate.Day)', '@(Model.CurrentStartDate.Hour)', '@(Model.CurrentStartDate.Minute)', '@(Model.CurrentStartDate.Second)'),
                OfficeInfo:@(Html.Raw(oOfficeInfo)),
            });
            MeetingObject.InitByDay('divMeetingCalendar');
        });
    </script>
}


