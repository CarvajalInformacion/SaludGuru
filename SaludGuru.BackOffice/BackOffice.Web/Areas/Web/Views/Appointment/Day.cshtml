@model BackOffice.Models.Appointment.SchedulingModel
@{
    ViewBag.Title = "Day";
    Layout = "~/Areas/Web/Views/Shared/_Layout.cshtml";
}

<!--Calendar by month-->
<div>
    <div>
        <a href="">Anterior</a>
        <a href="">Siguiente</a>
    </div>
    <div id="Calendar-Left"></div>
    <div id="Calendar-Right"></div>
</div>
<!--Meeting Calendar-->
<div id="divMeetingCalendar">
</div>

<div id="templates">
    <div id="divMetting">
        <div id="divOfficePublicId" class="selMetting"></div>
    </div>
    <!--create edit appointment-->
    <div id="AppointmentUpsert">
        <form action="" method="post">
            <ul>
                <li>
                    <label>Datos de la cita</label>
                </li>
                <li>
                    <label>Consultorio:</label>
                    <select id="selOffice" name="selOffice"></select>
                </li>
                <li>
                    <label>Tipo de tratamiento:</label>
                    <select id="selTreatment" name="selTreatment"></select>
                </li>
                <li>
                    <label>Fecha de inicio:</label>
                    <input type="text" id="StartDate" name="StartDate" />
                </li>
                <li>
                    <label>Hora de inicio:</label>
                    <input type="text" id="StartTime" name="StartTime" />
                </li>
                <li>
                    <label>Duración:</label>
                    <input type="text" id="Duration" name="Duration" />
                </li>
                <li>
                    <label>Asignar paciente(s):</label>
                    <input type="text" id="getPatient" name="getPatient" />
                </li>
                <li>
                    <label>Paciente(s) asignados a la cita:</label>
                </li>
                <li>
                    <ul id="lstPatient"></ul>
                </li>
            </ul>
            <div>
                <a href="">cancelar</a>
                <a href="">guardar</a>
            </div>
        </form>
    </div>
</div>
<div style="height:100px;"></div>

@{
    //create office calendar object
    string oOfficeInfo = (new System.Web.Script.Serialization.JavaScriptSerializer()).
                Serialize(Model.CurrentProfile.RelatedOffice.Select(of =>
                        new
                        {
                            OfficePublicId = of.OfficePublicId,
                            OfficeName = of.Name,
                            OfficeDivId = string.Empty,
                            TreatmentList = of.RelatedTreatment.Select(tr => new
                            {
                                TreatmentId = tr.CategoryId,
                                TreatmentName = tr.Name,
                                Default = tr.TreatmentOfficeInfo.Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.IsDefault).Select(z => z.Value == "true" ? true : false).DefaultIfEmpty(false).FirstOrDefault(),
                                Duration = tr.TreatmentOfficeInfo.Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.DurationTime).Select(z => z.Value).DefaultIfEmpty("30").FirstOrDefault(),
                                AfterCare = tr.TreatmentOfficeInfo.Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.AfterCare).Select(z => z.LargeValue).DefaultIfEmpty("").FirstOrDefault(),
                                BeforeCare = tr.TreatmentOfficeInfo.Where(y => y.OfficeCategoryInfoType == SaludGuruProfile.Manager.Models.enumOfficeCategoryInfoType.BeforeCare).Select(z => z.LargeValue).DefaultIfEmpty("").FirstOrDefault(),
                            }).OrderBy(tro => tro.TreatmentName).ToList(),
                        }).OrderBy(ofo => ofo.OfficeName).ToList());
}

@section inlinescripts
{
    <style>
        .ui-datepicker-week-end a.ui-state-default {
            background: #00ffff;
        }
        /*holiday*/
        .specialDay_1 a.ui-state-default {
            background: #ff0000;
        }
        /*not available day*/
        .specialDay_2 a.ui-state-default {
            background: #0026ff;
        }
        /*hide next and preview*/
        #Calendar-Left .ui-datepicker-prev {
            display: none;
        }

        #Calendar-Right .ui-datepicker-prev {
            display: none;
        }

        #Calendar-Left .ui-datepicker-next {
            display: none;
        }

        #Calendar-Right .ui-datepicker-next {
            display: none;
        }

        /*hide calendar all day event*/
        #divMeetingCalendar .fc-agenda-allday {
            display: none;
        }

        #divMeetingCalendar .fc-agenda-divider {
            display: none;
        }

        /*event personalized style*/
        .claseEvento_1 #div1j {
            background-color: #0026ff;
        }
    </style>

    <script type="text/javascript">
        $(document).ready(function () {
            //render calendar by month
            renderAsyncCalendar({
                DivId: 'Calendar',
                CountryId: '@(Model.CurrentProfile.RelatedOffice== null?1: Model.CurrentProfile.RelatedOffice.Select(x=>x.City.CountryId).DefaultIfEmpty(1).FirstOrDefault())',
                ProfilePublicId: '@Model.CurrentProfile.ProfilePublicId',
                FirstDate: new Date('@(Model.CurrentStartDate.Year.ToString())', '@((Model.CurrentStartDate.Month - 1).ToString())', '@(Model.CurrentStartDate.Day)'),
                SecondDate: new Date('@(Model.CurrentStartDate.AddMonths(1).Year.ToString())', '@((Model.CurrentStartDate.AddMonths(1).Month - 1).ToString())', '1'),
                Type: 'day'
            });

            //render day calendar
            MeetingObject.InitMeeting(@Html.Raw(oOfficeInfo));
            MeetingObject.InitByDay('divMeetingCalendar');
        });
    </script>
}


