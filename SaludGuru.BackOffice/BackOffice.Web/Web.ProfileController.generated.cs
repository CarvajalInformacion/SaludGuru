// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace BackOffice.Web.Areas.Web.Controllers
{
    public partial class ProfileController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ProfileController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ProfileController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ProfileEdit()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileEdit);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ProfileEditImage()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileEditImage);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult OfficeList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult OfficeUpsert()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeUpsert);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult OfficeTreatmentList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeTreatmentList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult OfficeTreatmentUpsert()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeTreatmentUpsert);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult OfficeScheduleAvailableList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeScheduleAvailableList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult OfficeScheduleAvailableCreate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeScheduleAvailableCreate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult OfficeScheduleAvailableDelete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeScheduleAvailableDelete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SpecialtyProfileList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpecialtyProfileList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ProfileSpecialtyUpsert()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileSpecialtyUpsert);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ProfileSpecialtyDelete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileSpecialtyDelete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult InsuranceProfileList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.InsuranceProfileList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult InsuranceProfileUpsert()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.InsuranceProfileUpsert);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult InsuranceProfileDelete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.InsuranceProfileDelete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult TreatmentProfileList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TreatmentProfileList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult TreatmentProfileUpsert()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TreatmentProfileUpsert);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult TreatmentProfileDelete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TreatmentProfileDelete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AutorizationProfileList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AutorizationProfileList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ProfileAutorizationUpsert()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileAutorizationUpsert);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ProfileAutorizationDelete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileAutorizationDelete);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ProfileController Actions { get { return MVC.Web.Profile; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Web";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Profile";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Profile";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string ProfileSearch = "ProfileSearch";
            public readonly string ProfileCreate = "ProfileCreate";
            public readonly string ProfileEdit = "ProfileEdit";
            public readonly string ProfileEditImage = "ProfileEditImage";
            public readonly string OfficeList = "OfficeList";
            public readonly string OfficeUpsert = "OfficeUpsert";
            public readonly string OfficeTreatmentList = "OfficeTreatmentList";
            public readonly string OfficeTreatmentUpsert = "OfficeTreatmentUpsert";
            public readonly string OfficeScheduleAvailableList = "OfficeScheduleAvailableList";
            public readonly string OfficeScheduleAvailableCreate = "OfficeScheduleAvailableCreate";
            public readonly string OfficeScheduleAvailableDelete = "OfficeScheduleAvailableDelete";
            public readonly string SpecialtyProfileList = "SpecialtyProfileList";
            public readonly string ProfileSpecialtyUpsert = "ProfileSpecialtyUpsert";
            public readonly string ProfileSpecialtyDelete = "ProfileSpecialtyDelete";
            public readonly string InsuranceProfileList = "InsuranceProfileList";
            public readonly string InsuranceProfileUpsert = "InsuranceProfileUpsert";
            public readonly string InsuranceProfileDelete = "InsuranceProfileDelete";
            public readonly string TreatmentProfileList = "TreatmentProfileList";
            public readonly string TreatmentProfileUpsert = "TreatmentProfileUpsert";
            public readonly string TreatmentProfileDelete = "TreatmentProfileDelete";
            public readonly string AutorizationProfileList = "AutorizationProfileList";
            public readonly string ProfileAutorizationUpsert = "ProfileAutorizationUpsert";
            public readonly string ProfileAutorizationDelete = "ProfileAutorizationDelete";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string ProfileSearch = "ProfileSearch";
            public const string ProfileCreate = "ProfileCreate";
            public const string ProfileEdit = "ProfileEdit";
            public const string ProfileEditImage = "ProfileEditImage";
            public const string OfficeList = "OfficeList";
            public const string OfficeUpsert = "OfficeUpsert";
            public const string OfficeTreatmentList = "OfficeTreatmentList";
            public const string OfficeTreatmentUpsert = "OfficeTreatmentUpsert";
            public const string OfficeScheduleAvailableList = "OfficeScheduleAvailableList";
            public const string OfficeScheduleAvailableCreate = "OfficeScheduleAvailableCreate";
            public const string OfficeScheduleAvailableDelete = "OfficeScheduleAvailableDelete";
            public const string SpecialtyProfileList = "SpecialtyProfileList";
            public const string ProfileSpecialtyUpsert = "ProfileSpecialtyUpsert";
            public const string ProfileSpecialtyDelete = "ProfileSpecialtyDelete";
            public const string InsuranceProfileList = "InsuranceProfileList";
            public const string InsuranceProfileUpsert = "InsuranceProfileUpsert";
            public const string InsuranceProfileDelete = "InsuranceProfileDelete";
            public const string TreatmentProfileList = "TreatmentProfileList";
            public const string TreatmentProfileUpsert = "TreatmentProfileUpsert";
            public const string TreatmentProfileDelete = "TreatmentProfileDelete";
            public const string AutorizationProfileList = "AutorizationProfileList";
            public const string ProfileAutorizationUpsert = "ProfileAutorizationUpsert";
            public const string ProfileAutorizationDelete = "ProfileAutorizationDelete";
        }


        static readonly ActionParamsClass_ProfileEdit s_params_ProfileEdit = new ActionParamsClass_ProfileEdit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ProfileEdit ProfileEditParams { get { return s_params_ProfileEdit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ProfileEdit
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_ProfileEditImage s_params_ProfileEditImage = new ActionParamsClass_ProfileEditImage();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ProfileEditImage ProfileEditImageParams { get { return s_params_ProfileEditImage; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ProfileEditImage
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_OfficeList s_params_OfficeList = new ActionParamsClass_OfficeList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OfficeList OfficeListParams { get { return s_params_OfficeList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OfficeList
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_OfficeUpsert s_params_OfficeUpsert = new ActionParamsClass_OfficeUpsert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OfficeUpsert OfficeUpsertParams { get { return s_params_OfficeUpsert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OfficeUpsert
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
            public readonly string OfficePublicId = "OfficePublicId";
        }
        static readonly ActionParamsClass_OfficeTreatmentList s_params_OfficeTreatmentList = new ActionParamsClass_OfficeTreatmentList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OfficeTreatmentList OfficeTreatmentListParams { get { return s_params_OfficeTreatmentList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OfficeTreatmentList
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
            public readonly string OfficePublicId = "OfficePublicId";
        }
        static readonly ActionParamsClass_OfficeTreatmentUpsert s_params_OfficeTreatmentUpsert = new ActionParamsClass_OfficeTreatmentUpsert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OfficeTreatmentUpsert OfficeTreatmentUpsertParams { get { return s_params_OfficeTreatmentUpsert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OfficeTreatmentUpsert
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
            public readonly string OfficePublicId = "OfficePublicId";
            public readonly string TreatmentId = "TreatmentId";
        }
        static readonly ActionParamsClass_OfficeScheduleAvailableList s_params_OfficeScheduleAvailableList = new ActionParamsClass_OfficeScheduleAvailableList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OfficeScheduleAvailableList OfficeScheduleAvailableListParams { get { return s_params_OfficeScheduleAvailableList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OfficeScheduleAvailableList
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
            public readonly string OfficePublicId = "OfficePublicId";
        }
        static readonly ActionParamsClass_OfficeScheduleAvailableCreate s_params_OfficeScheduleAvailableCreate = new ActionParamsClass_OfficeScheduleAvailableCreate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OfficeScheduleAvailableCreate OfficeScheduleAvailableCreateParams { get { return s_params_OfficeScheduleAvailableCreate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OfficeScheduleAvailableCreate
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
            public readonly string OfficePublicId = "OfficePublicId";
        }
        static readonly ActionParamsClass_OfficeScheduleAvailableDelete s_params_OfficeScheduleAvailableDelete = new ActionParamsClass_OfficeScheduleAvailableDelete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OfficeScheduleAvailableDelete OfficeScheduleAvailableDeleteParams { get { return s_params_OfficeScheduleAvailableDelete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OfficeScheduleAvailableDelete
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
            public readonly string OfficePublicId = "OfficePublicId";
        }
        static readonly ActionParamsClass_SpecialtyProfileList s_params_SpecialtyProfileList = new ActionParamsClass_SpecialtyProfileList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SpecialtyProfileList SpecialtyProfileListParams { get { return s_params_SpecialtyProfileList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SpecialtyProfileList
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_ProfileSpecialtyUpsert s_params_ProfileSpecialtyUpsert = new ActionParamsClass_ProfileSpecialtyUpsert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ProfileSpecialtyUpsert ProfileSpecialtyUpsertParams { get { return s_params_ProfileSpecialtyUpsert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ProfileSpecialtyUpsert
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_ProfileSpecialtyDelete s_params_ProfileSpecialtyDelete = new ActionParamsClass_ProfileSpecialtyDelete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ProfileSpecialtyDelete ProfileSpecialtyDeleteParams { get { return s_params_ProfileSpecialtyDelete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ProfileSpecialtyDelete
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_InsuranceProfileList s_params_InsuranceProfileList = new ActionParamsClass_InsuranceProfileList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_InsuranceProfileList InsuranceProfileListParams { get { return s_params_InsuranceProfileList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_InsuranceProfileList
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_InsuranceProfileUpsert s_params_InsuranceProfileUpsert = new ActionParamsClass_InsuranceProfileUpsert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_InsuranceProfileUpsert InsuranceProfileUpsertParams { get { return s_params_InsuranceProfileUpsert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_InsuranceProfileUpsert
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_InsuranceProfileDelete s_params_InsuranceProfileDelete = new ActionParamsClass_InsuranceProfileDelete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_InsuranceProfileDelete InsuranceProfileDeleteParams { get { return s_params_InsuranceProfileDelete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_InsuranceProfileDelete
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_TreatmentProfileList s_params_TreatmentProfileList = new ActionParamsClass_TreatmentProfileList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_TreatmentProfileList TreatmentProfileListParams { get { return s_params_TreatmentProfileList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_TreatmentProfileList
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_TreatmentProfileUpsert s_params_TreatmentProfileUpsert = new ActionParamsClass_TreatmentProfileUpsert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_TreatmentProfileUpsert TreatmentProfileUpsertParams { get { return s_params_TreatmentProfileUpsert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_TreatmentProfileUpsert
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_TreatmentProfileDelete s_params_TreatmentProfileDelete = new ActionParamsClass_TreatmentProfileDelete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_TreatmentProfileDelete TreatmentProfileDeleteParams { get { return s_params_TreatmentProfileDelete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_TreatmentProfileDelete
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_AutorizationProfileList s_params_AutorizationProfileList = new ActionParamsClass_AutorizationProfileList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AutorizationProfileList AutorizationProfileListParams { get { return s_params_AutorizationProfileList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AutorizationProfileList
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ActionParamsClass_ProfileAutorizationUpsert s_params_ProfileAutorizationUpsert = new ActionParamsClass_ProfileAutorizationUpsert();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ProfileAutorizationUpsert ProfileAutorizationUpsertParams { get { return s_params_ProfileAutorizationUpsert; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ProfileAutorizationUpsert
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
            public readonly string RoleId = "RoleId";
        }
        static readonly ActionParamsClass_ProfileAutorizationDelete s_params_ProfileAutorizationDelete = new ActionParamsClass_ProfileAutorizationDelete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ProfileAutorizationDelete ProfileAutorizationDeleteParams { get { return s_params_ProfileAutorizationDelete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ProfileAutorizationDelete
        {
            public readonly string ProfilePublicId = "ProfilePublicId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string AutorizationProfileList = "AutorizationProfileList";
                public readonly string InsuranceProfileList = "InsuranceProfileList";
                public readonly string OfficeList = "OfficeList";
                public readonly string OfficeScheduleAvailableList = "OfficeScheduleAvailableList";
                public readonly string OfficeTreatmentList = "OfficeTreatmentList";
                public readonly string OfficeTreatmentUpsert = "OfficeTreatmentUpsert";
                public readonly string OfficeUpsert = "OfficeUpsert";
                public readonly string ProfileCreate = "ProfileCreate";
                public readonly string ProfileEdit = "ProfileEdit";
                public readonly string ProfileEditImage = "ProfileEditImage";
                public readonly string ProfileSearch = "ProfileSearch";
                public readonly string SpecialtyProfileList = "SpecialtyProfileList";
                public readonly string TreatmentProfileList = "TreatmentProfileList";
            }
            public readonly string AutorizationProfileList = "~/Areas/Web/Views/Profile/AutorizationProfileList.cshtml";
            public readonly string InsuranceProfileList = "~/Areas/Web/Views/Profile/InsuranceProfileList.cshtml";
            public readonly string OfficeList = "~/Areas/Web/Views/Profile/OfficeList.cshtml";
            public readonly string OfficeScheduleAvailableList = "~/Areas/Web/Views/Profile/OfficeScheduleAvailableList.cshtml";
            public readonly string OfficeTreatmentList = "~/Areas/Web/Views/Profile/OfficeTreatmentList.cshtml";
            public readonly string OfficeTreatmentUpsert = "~/Areas/Web/Views/Profile/OfficeTreatmentUpsert.cshtml";
            public readonly string OfficeUpsert = "~/Areas/Web/Views/Profile/OfficeUpsert.cshtml";
            public readonly string ProfileCreate = "~/Areas/Web/Views/Profile/ProfileCreate.cshtml";
            public readonly string ProfileEdit = "~/Areas/Web/Views/Profile/ProfileEdit.cshtml";
            public readonly string ProfileEditImage = "~/Areas/Web/Views/Profile/ProfileEditImage.cshtml";
            public readonly string ProfileSearch = "~/Areas/Web/Views/Profile/ProfileSearch.cshtml";
            public readonly string SpecialtyProfileList = "~/Areas/Web/Views/Profile/SpecialtyProfileList.cshtml";
            public readonly string TreatmentProfileList = "~/Areas/Web/Views/Profile/TreatmentProfileList.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ProfileController : BackOffice.Web.Areas.Web.Controllers.ProfileController
    {
        public T4MVC_ProfileController() : base(Dummy.Instance) { }

        [NonAction]
        partial void ProfileSearchOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProfileSearch()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileSearch);
            ProfileSearchOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ProfileCreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProfileCreate()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileCreate);
            ProfileCreateOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ProfileEditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProfileEdit(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileEdit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ProfileEditOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void ProfileEditImageOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProfileEditImage(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileEditImage);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ProfileEditImageOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void OfficeListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult OfficeList(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            OfficeListOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void OfficeUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId, string OfficePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult OfficeUpsert(string ProfilePublicId, string OfficePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeUpsert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OfficePublicId", OfficePublicId);
            OfficeUpsertOverride(callInfo, ProfilePublicId, OfficePublicId);
            return callInfo;
        }

        [NonAction]
        partial void OfficeTreatmentListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId, string OfficePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult OfficeTreatmentList(string ProfilePublicId, string OfficePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeTreatmentList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OfficePublicId", OfficePublicId);
            OfficeTreatmentListOverride(callInfo, ProfilePublicId, OfficePublicId);
            return callInfo;
        }

        [NonAction]
        partial void OfficeTreatmentUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId, string OfficePublicId, string TreatmentId);

        [NonAction]
        public override System.Web.Mvc.ActionResult OfficeTreatmentUpsert(string ProfilePublicId, string OfficePublicId, string TreatmentId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeTreatmentUpsert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OfficePublicId", OfficePublicId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "TreatmentId", TreatmentId);
            OfficeTreatmentUpsertOverride(callInfo, ProfilePublicId, OfficePublicId, TreatmentId);
            return callInfo;
        }

        [NonAction]
        partial void OfficeScheduleAvailableListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId, string OfficePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult OfficeScheduleAvailableList(string ProfilePublicId, string OfficePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeScheduleAvailableList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OfficePublicId", OfficePublicId);
            OfficeScheduleAvailableListOverride(callInfo, ProfilePublicId, OfficePublicId);
            return callInfo;
        }

        [NonAction]
        partial void OfficeScheduleAvailableCreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId, string OfficePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult OfficeScheduleAvailableCreate(string ProfilePublicId, string OfficePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeScheduleAvailableCreate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OfficePublicId", OfficePublicId);
            OfficeScheduleAvailableCreateOverride(callInfo, ProfilePublicId, OfficePublicId);
            return callInfo;
        }

        [NonAction]
        partial void OfficeScheduleAvailableDeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId, string OfficePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult OfficeScheduleAvailableDelete(string ProfilePublicId, string OfficePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OfficeScheduleAvailableDelete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OfficePublicId", OfficePublicId);
            OfficeScheduleAvailableDeleteOverride(callInfo, ProfilePublicId, OfficePublicId);
            return callInfo;
        }

        [NonAction]
        partial void SpecialtyProfileListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult SpecialtyProfileList(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpecialtyProfileList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            SpecialtyProfileListOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void ProfileSpecialtyUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProfileSpecialtyUpsert(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileSpecialtyUpsert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ProfileSpecialtyUpsertOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void ProfileSpecialtyDeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProfileSpecialtyDelete(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileSpecialtyDelete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ProfileSpecialtyDeleteOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void InsuranceProfileListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult InsuranceProfileList(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.InsuranceProfileList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            InsuranceProfileListOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void InsuranceProfileUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult InsuranceProfileUpsert(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.InsuranceProfileUpsert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            InsuranceProfileUpsertOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void InsuranceProfileDeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult InsuranceProfileDelete(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.InsuranceProfileDelete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            InsuranceProfileDeleteOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void TreatmentProfileListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult TreatmentProfileList(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TreatmentProfileList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            TreatmentProfileListOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void TreatmentProfileUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult TreatmentProfileUpsert(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TreatmentProfileUpsert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            TreatmentProfileUpsertOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void TreatmentProfileDeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult TreatmentProfileDelete(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TreatmentProfileDelete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            TreatmentProfileDeleteOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void AutorizationProfileListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult AutorizationProfileList(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AutorizationProfileList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            AutorizationProfileListOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

        [NonAction]
        partial void ProfileAutorizationUpsertOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId, SessionController.Models.Profile.enumRole RoleId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProfileAutorizationUpsert(string ProfilePublicId, SessionController.Models.Profile.enumRole RoleId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileAutorizationUpsert);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RoleId", RoleId);
            ProfileAutorizationUpsertOverride(callInfo, ProfilePublicId, RoleId);
            return callInfo;
        }

        [NonAction]
        partial void ProfileAutorizationDeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProfilePublicId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProfileAutorizationDelete(string ProfilePublicId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileAutorizationDelete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfilePublicId", ProfilePublicId);
            ProfileAutorizationDeleteOverride(callInfo, ProfilePublicId);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
